# working with dplyr package (explore the cheatsheet from the help menu)
library(dplyr)
1+1
# instaling packages
# install.packages(c("wooldridge", "dplyr")) # run this line only once
library(wooldridge)
new_df <- data.frame(names=c("PJ", "TJ", "CJ", "MJ"), GPA=c(2,3.8,3.5, 4))
new_df
new_df
# mutate()
mutate(new_df, height = c(180,170,175, 172)) # adding a new column
new_df
# mutate()
mutate(new_df, height = c(180,170,175, 172)) # adding a new column
new_df
mutate(new_df, height = c(180,170,175, 172)) # adding a new column
new_df
new_df <- mutate(new_df, height = c(180,170,175,190))
new_df
new_df <- mutate(new_df, is_pass= ifelse(GPA>3.6,"pass", "fail"))
new_df
new_df
filter(new_df, is_pass=="fail")
filter(new_df, GPA>3)
# filter()
new_df
filter(new_df, GPA>3 & height>=175)
# arrange()
arrange(new_df, GPA)
arrange(new_df, desc(GPA))
new_df$height
new_df["height"]
select(new_df, height)
select(new_df, c(is_pass,names))
select(new_df, c(names,is_pass))
head(wage2)
# So what is the power of select?
names(wage2)
select(wage2, contains("educ"))
head(select(wage2, starts_with("E"))) # what if I put a negative sign before start_with ?
head(select(wage2, ends_with("c")))
new_df
# combining functions
filter(new_df, GPA>3 & height>=170)
arrange(filter(new_df, GPA>3 & height>=170),desc(height))
select(arrange(filter(new_df, GPA>3 & height>=170),desc(height)), names)
new_df
new_df %>% filter(GPA>3 & height>=170)
new_df %>% filter(GPA>3 & height>=170) %>% arrange(desc(height))
# using pipe operator
new_df %>% filter(GPA>3 & height>=170) %>% arrange(desc(height)) %>% select(names)
df<- wage2
head(df)
str(df)
summary(df)
# Handling missing data
library(visdat)
# Handling missing data
install.packages("visdat")
library(visdat)
.libPaths()
.libPaths()
library(dplyr)
vis_dat(df)
vis_miss(df)
# cleaning the data set
df_clean <-na.omit(df)
vis_miss(df)
vis_mis(df_clean)
# cleaning the data set
df_clean <-na.omit(df)
vis_mis(df_clean)
vis_miss(df_clean)
# Data tables
df <- select(df_clean, c("wage", "hours", "IQ", "educ", "age", "married", "black"))
head(df)
# Data tables
df <- select(df_clean, c("wage", "hours", "IQ", "educ", "age", "married", "black"))
head(df)
table(df$married)
table(df$black)
my_table<- table(df$married, df$black)
my_table
colnames(my_table) <- c("non_black", "black")
my_table
rownames(my_table)<- c("non_married", "married")
my_table
my_table
# proportion tables
prop.table(my_table,margin= 1)
prop.table(my_table,margin= 2)
str(df)
# factorizing some variables (we will use this for making dummy variables later in the course)
df$married <- factor(df$married)
df$black   <- factor(df$black)
str(df)
# some basic plots
df<- wage2
# histogram
hist(df$wage)
hist(df$wage, xlab = "wage", col = "blue")
hist(df$wage, xlab = "wage", col = "blue", bin=5)
hist(df$wage, xlab = "wage", col = "blue")
hist(df$wage, xlab = "wage", col = "blue")
hist(df$wage, xlab = "wage", col = "blue", breaks = 5)
# scatter plot
plot(df$educ, df$wage, xlab = "education", ylab = "Wage")
#---------------------------------------------------------------------------------------
# 9- List: list is a generic collection of objects
my_list <- list()
my_list[[1]] <- "Hello"
my_list[[2]] <- c(1,2,3)
my_list[[3]] <- data.frame(name=c("A", "B"), value=c(4,3.8))
my_list
my_list
